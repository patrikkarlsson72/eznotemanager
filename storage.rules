rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }

    function canPerformSensitiveOperations() {
      return isAuthenticated() && (
        isEmailVerified() || 
        request.auth.token.firebase.sign_in_provider != 'password'
      );
    }

    match /{userId}/images/{imageId} {
      // Allow reading if authenticated
      allow read: if isAuthenticated();
      
      // Allow writing if authenticated, owner, verified email (or non-email auth), and meets file requirements
      allow write: if isUserOwner(userId) &&
        canPerformSensitiveOperations() &&
        request.resource.size < 5 * 1024 * 1024 &&  // 5MB max file size
        request.resource.contentType.matches('image/.*');  // Only allow images
    }
    
    match /{userId}/files/{fileId} {
      // Allow reading if authenticated
      allow read: if isAuthenticated();
      
      // Allow writing if authenticated, owner, verified email (or non-email auth), and meets file requirements
      allow write: if isUserOwner(userId) &&
        canPerformSensitiveOperations() &&
        request.resource.size < 10 * 1024 * 1024;  // 10MB max file size
    }
  }
} 