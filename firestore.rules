rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isUserOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user's email is verified
    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }

    // Helper function to check if user can perform sensitive operations
    function canPerformSensitiveOperations() {
      return isAuthenticated() && (
        isEmailVerified() || 
        request.auth.token.firebase.sign_in_provider != 'password'
      );
    }

    // Notes collection rules
    match /notes/{noteId} {
      // Allow reading if authenticated and owner
      allow read: if isUserOwner(resource.data.userId);
      
      // Allow creation if authenticated
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow updates and deletes if authenticated, owner, and (email verified or non-email auth)
      allow update, delete: if isUserOwner(resource.data.userId) && 
        canPerformSensitiveOperations();
    }

    // Users collection rules
    match /users/{userId} {
      // Allow reading own data
      allow read: if isUserOwner(userId);
      
      // Allow creation and updates if authenticated and owner
      allow create, update: if isUserOwner(userId) && 
        // For encryption key updates, require sensitive operations check
        (
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['encryptedKey'])) ||
          canPerformSensitiveOperations()
        );
      
      // Prevent deletion of user documents
      allow delete: if false;
    }
  }
} 